const { expect } = require('chai')
const { forkCChain } = require('../utils')

const wavax = '0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7'
const avaxUsdAggregator = '0x0A77230d17318075983913bC2145DB16C7366156'

/*
Last hour price samples and their timestamp at block 32814772, timestamp 1689790132
roundId | AvaxPrice | Timestamp
18446744073710023361 1411132705 1689790103
18446744073710023361 1411132705 1689790103
18446744073710023360 1412885486 1689790041
18446744073710023359 1413150000 1689789891
18446744073710023358 1415000000 1689789742
18446744073710023357 1417000000 1689789712
18446744073710023356 1415110000 1689789683
18446744073710023355 1413312200 1689789623
18446744073710023354 1412000000 1689789500 // just before last hour end
18446744073710023353 1414190000 1689789441
18446744073710023352 1414970000 1689789293
18446744073710023351 1413985860 1689789172
18446744073710023350 1411487700 1689789021
18446744073710023349 1409993250 1689788992
18446744073710023348 1407985920 1689788961
18446744073710023347 1406380000 1689788930
18446744073710023346 1405060000 1689788782
18446744073710023345 1403000000 1689788630
18446744073710023344 1402000000 1689788480
18446744073710023343 1402048400 1689788333
18446744073710023342 1400010000 1689788184
18446744073710023341 1400020000 1689788030
18446744073710023340 1398548825 1689787911
18446744073710023339 1398855000 1689787760
18446744073710023338 1399893630 1689787610
18446744073710023337 1398843654 1689787462
18446744073710023336 1397858764 1689787341
18446744073710023335 1396644900 1689787192
18446744073710023334 1398000000 1689787043
18446744073710023333 1399439015 1689786890
18446744073710023332 1397391030 1689786740
18446744073710023331 1395918000 1689786592
18446744073710023330 1394735000 1689786470
18446744073710023329 1393667673 1689786321
18446744073710023328 1392088475 1689786260
18446744073710023327 1391958240 1689786109
18446744073710023326 1391600000 1689785961 // just before last hour start
aggregator decimals = 8
*/

describe('Oracle Unit Tests', function() {
    before(async function() {
        await forkCChain(32814472)
        signers = await ethers.getSigners()
        alice = signers[0].address

        const Oracle = await ethers.getContractFactory('NewOracle')
        oracle = await Oracle.deploy()
        await oracle.setAggregator(wavax, avaxUsdAggregator, 120 /* 2 minutes */)
    })

    it('get underlying Twap Price', async function () {
        /**
        * blocktimestamp = 1689790132
        * last hour start = 1689786000
        * last hour end = 1689789600
        * twap for last 1 hour = (1412000000 * (1689789600 - 1689789500) + 1414190000 * (1689789500 - 1689789441) +
        *  1414970000 * (1689789441 - 1689789293) + 1413985860 * (1689789293 - 1689789172) +
        * 1411487700 * (1689789172 - 1689789021) + 1409993250 * (1689789021 - 1689788992) +
        * 1407985920 * (1689788992 - 1689788961) + 1406380000 * (1689788961 - 1689788930) +
        * 1405060000 * (1689788930 - 1689788782) + 1403000000 * (1689788782 - 1689788630) +
        * 1402000000 * (1689788630 - 1689788480) + 1402048400 * (1689788480 - 1689788333) +
        * 1400010000 * (1689788333 - 1689788184) + 1400020000 * (1689788184 - 1689788030) +
        * 1398548825 * (1689788030 - 1689787911) + 1398855000 * (1689787911 - 1689787760) +
        * 1399893630 * (1689787760 - 1689787610) + 1398843654 * (1689787610 - 1689787462) +
        * 1397858764 * (1689787462 - 1689787341) + 1396644900 * (1689787341 - 1689787192) +
        * 1398000000 * (1689787192 - 1689787043) + 1399439015 * (1689787043 - 1689786890) +
        * 1397391030 * (1689786890 - 1689786740) + 1395918000 * (1689786740 - 1689786592) +
        * 1394735000 * (1689786592 - 1689786470) + 1393667673 * (1689786470 - 1689786321) +
        * 1392088475 * (1689786321 - 1689786260) + 1391958240 * (1689786260 - 1689786109) +
        * 1391600000 * (1689786109 - 1689786000) ) / 3600 / 100 = 14009322
        */

        expect(await oracle.getUnderlyingTwapPrice(wavax, 1689786000, 3600)).to.eq('14009322');
    })

    it('revert when asking intervel is 0', async () => {
        await expect(oracle.getUnderlyingTwapPrice(wavax, 1689786000, 0)).to.be.revertedWith('interval can\'t be 0')
    })
})
